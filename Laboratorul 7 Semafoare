#include <pthread.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <mutex>
#include <semaphore.h>


pthread_mutex_t mtx;
sem_t semaf;
int n, cnt;

void barrier_point() {

    pthread_mutex_lock(&mtx);
    cnt++;
    if(cnt == n) sem_post(&semaf);
    pthread_mutex_unlock(&mtx);

    sem_wait(&semaf);
    sem_post(&semaf);
}

void *func(void *v) {

    int *tid = (int *)v;

    printf("\n%d a ajuns la bariera", *tid);
    barrier_point();
    printf("\n%d a trecut bariera\n", *tid);

    return NULL;
}


int main() {

    scanf("%d", &n);

    pthread_t thr[n];


    if(pthread_mutex_init(&mtx, NULL)) {
        perror(NULL);
        return errno;
    }

    if(sem_init(&semaf, 0, 0)) {
        perror(NULL);
        return errno;
    }

    int vMark[n];
    for(int i = 0; i < n; ++i) {
        vMark[i] = i;
    }

    for(int i = 0; i < n; ++i) {
        if(pthread_create(&thr[i], NULL, func, &vMark[i])) {
            perror(NULL);
            return errno;
        }
    }

    for(int i = 0; i < n; ++i) {
        if(pthread_join(thr[i], NULL)) {
            perror(NULL);
            return errno;
        }
    }


    sem_destroy(&semaf);
    pthread_mutex_destroy(&mtx);

    return 0;
}
